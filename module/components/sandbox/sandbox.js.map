{"version":3,"sources":["../../../src/components/sandbox/sandbox.js"],"names":["div","Observable","apply","flip","identity","length","map","merge","prop","zip","Collection","examples","bgWhite","mergeStyles","elevation1","Timeline","createOutputStream$","inputsToTimelines","renderOperatorBox","sandboxStyle","borderRadius","Sandbox","DOM","store","example$","pluck","skip","distinctUntilChanged","exampleKey","publishReplay","refCount","inputStores$","switchMap","example","filter","startWith","inputs","outputStore$","outputTimelineSources$","marbles","end","interactive","of","inputTimelines$","gather","outputTimeline","inputDOMs$","inputDataList$","debounceTime","withLatestFrom","vtree$","combineLatest","inputsDOMs","outputDOM","style","label","data"],"mappings":"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","sourcesContent":["import { div } from '@cycle/dom';\nimport { Observable } from 'rxjs';\nimport { apply, flip, identity, length, map, merge, prop, zip } from 'ramda';\n\nimport { Collection } from '../../collection';\nimport { examples } from '../../data';\nimport { bgWhite } from '../../styles';\nimport { merge as mergeStyles, elevation1 } from '../../styles/utils';\n\nimport { Timeline } from '../timeline';\n\nimport { createOutputStream$ } from './sandbox-output';\nimport { inputsToTimelines } from './sandbox-input';\nimport { renderOperatorBox } from './operator-label';;\n\n\nconst sandboxStyle = mergeStyles(bgWhite, elevation1, { borderRadius: '2px' });\n\nexport function Sandbox({ DOM, store }) {\n  const example$ = store.pluck('route')\n    .skip(1) // blank first route\n    .distinctUntilChanged()\n    .map(exampleKey => examples[exampleKey])\n    .publishReplay(1).refCount();\n\n  const inputStores$ = example$\n    .switchMap(example =>\n      store.pluck('inputs')\n        .filter(identity)\n        // bug: For some reason inputDataList$ emits old value after\n        // route change. Skip it.\n        .skip(1)\n        .startWith(inputsToTimelines(example.inputs))\n    )\n    .publishReplay(1).refCount();\n\n  const outputStore$ = createOutputStream$(example$, inputStores$);\n  const outputTimelineSources$ = {\n    DOM,\n    marbles: outputStore$.pluck('marbles'),\n    end: outputStore$.pluck('end'),\n    interactive: Observable.of(false),\n  };\n\n  const inputTimelines$\n    = Collection.gather(Timeline, { DOM }, inputStores$, 'id')\n      .publishReplay(1).refCount()\n  const outputTimeline = Timeline(outputTimelineSources$);\n\n  const inputDOMs$ = Collection.pluck(inputTimelines$, prop('DOM'));\n  const inputDataList$ = Collection.pluck(inputTimelines$, prop('data'))\n    .filter(length)\n    .debounceTime(0)\n    .withLatestFrom(inputStores$, zip)\n    .map(map(apply(flip(merge))));\n\n  const vtree$ = Observable\n    .combineLatest(inputDOMs$, outputTimeline.DOM, example$)\n    .map(([inputsDOMs, outputDOM, example]) =>\n      div({ style: sandboxStyle }, [\n        ...inputsDOMs,\n        renderOperatorBox(example.label),\n        outputDOM,\n      ]),\n    );\n\n  return {\n    DOM: vtree$,\n    data: inputDataList$.map((inputs) => ({ inputs })),\n  };\n}\n"],"file":"sandbox.js"}