{"version":3,"sources":["../../../src/components/timeline/marble.js"],"names":["svg","isolate","Observable","merge","values","range","dropshadow","COLORS","fontBase","userSelectNone","mergeStyles","MARBLE_SIZE","STROKE_WIDTH","timelineItem","ELEMENT_CLASS","POSSIBLE_COLORS","blue","green","yellow","red","view","sources","value$","isHighlighted$","combineLatest","id","content","map","value","isHighlighted","g","attrs","class","transform","style","cursor","circle","r","fill","length","stroke","strokeWidth","text","y","fontSize","OriginalMarble","DOM","time","data$","data","Marble"],"mappings":"AAAA,SAASA,GAAT,QAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,KAAxB,QAAqC,OAArC;AAEA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SACEC,MADF,EAEEC,QAFF,EAGEC,cAHF,EAIEN,KAAK,IAAIO,WAJX,QAKO,cALP;AAOA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,sBAA1C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAGA,MAAMC,aAAa,GAAG,QAAtB;AAEA,MAAMC,eAAe,GAAG,CAACR,MAAM,CAACS,IAAR,EAAcT,MAAM,CAACU,KAArB,EAA4BV,MAAM,CAACW,MAAnC,EAA2CX,MAAM,CAACY,GAAlD,CAAxB;;AAEA,SAASC,IAAT,CAAcC,OAAd,EAAuBC,MAAvB,EAA+BC,cAA/B,EAA+C;AAC7C,SAAOrB,UAAU,CAACsB,aAAX,CACLH,OAAO,CAACI,EADH,EACOJ,OAAO,CAACK,OADf,EACwBJ,MADxB,EACgCC,cADhC,EAEJI,GAFI,CAEA,CAAC,CAACF,EAAD,EAAKC,OAAL,EAAcE,KAAd,EAAqBC,aAArB,CAAD,KACH7B,GAAG,CAAC8B,CAAJ,CAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAElB,aAAT;AAAwBmB,MAAAA,SAAS,EAAG,aAAYL,KAAM;AAAtD,KADH;AAEJM,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEN,aAAa,GAAG,WAAH,GAAiB;AAAxC;AAFH,GAAN,EAGG,CACD7B,GAAG,CAACoC,MAAJ,CAAW;AACTL,IAAAA,KAAK,EAAE;AAAEM,MAAAA,CAAC,EAAE1B;AAAL,KADE;AAETuB,IAAAA,KAAK,EAAE/B,KAAK,CAAC;AACXmC,MAAAA,IAAI,EAAEvB,eAAe,CAACU,EAAE,GAAGV,eAAe,CAACwB,MAAtB,CADV;AAEXC,MAAAA,MAAM,EAAE,OAFG;AAGXC,MAAAA,WAAW,EAAE7B;AAHF,KAAD,EAITiB,aAAa,GAAGvB,UAAH,GAAgB,EAJpB;AAFH,GAAX,CADC,EASDN,GAAG,CAAC0C,IAAJ,CAAS;AACPX,IAAAA,KAAK,EAAE;AACL,qBAAe,QADV;AACoBY,MAAAA,CAAC,EAAE;AADvB,KADA;AAGPT,IAAAA,KAAK,EAAExB,WAAW,CAAC;AAAEkC,MAAAA,QAAQ,EAAE;AAAZ,KAAD,EAAwBpC,QAAxB,EAAkCC,cAAlC;AAHX,GAAT,EAIG,CAAE,GAAEiB,OAAQ,EAAZ,CAJH,CATC,CAHH,CAHG,CAAP;AAsBD;;AAED,SAASmB,cAAT,CAAwBxB,OAAxB,EAAiC;AAC/B,QAAM;AAAEyB,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAgBlC,YAAY,CAACC,aAAD,EAAgBM,IAAhB,EAAsBC,OAAtB,CAAlC;AAEA,QAAM2B,KAAK,GAAG9C,UAAU,CAACsB,aAAX,CAAyBuB,IAAzB,EAA+B1B,OAAO,CAACI,EAAvC,EACXE,GADW,CACP,CAAC,CAACoB,IAAD,EAAOtB,EAAP,CAAD,MAAiB;AAAEsB,IAAAA,IAAF;AAAQtB,IAAAA;AAAR,GAAjB,CADO,CAAd;AAGA,SAAO;AAAEqB,IAAAA,GAAF;AAAOG,IAAAA,IAAI,EAAED;AAAb,GAAP;AACD;;AAED,OAAO,SAASE,MAAT,CAAgB7B,OAAhB,EAAyB;AAC9B,SAAOpB,OAAO,CAAC4C,cAAD,CAAP,CAAwBxB,OAAxB,CAAP;AACD","sourcesContent":["import { svg } from '@cycle/dom';\nimport isolate from '@cycle/isolate';\nimport { Observable } from 'rxjs';\nimport { merge, values, range } from 'ramda';\n\nimport { dropshadow } from '../../styles/utils';\nimport {\n  COLORS,\n  fontBase,\n  userSelectNone,\n  merge as mergeStyles\n} from '../../styles';\n\nimport { MARBLE_SIZE, STROKE_WIDTH } from './timeline-constants';\nimport { timelineItem } from './timeline-item';\n\n\nconst ELEMENT_CLASS = 'marble';\n\nconst POSSIBLE_COLORS = [COLORS.blue, COLORS.green, COLORS.yellow, COLORS.red];\n\nfunction view(sources, value$, isHighlighted$) {\n  return Observable.combineLatest(\n    sources.id, sources.content, value$, isHighlighted$)\n    .map(([id, content, value, isHighlighted]) =>\n      svg.g({\n        attrs: { class: ELEMENT_CLASS, transform: `translate(${value}, 5)` },\n        style: { cursor: isHighlighted ? 'ew-resize' : 'default'  },\n      }, [\n        svg.circle({\n          attrs: { r: MARBLE_SIZE },\n          style: merge({\n            fill: POSSIBLE_COLORS[id % POSSIBLE_COLORS.length],\n            stroke: 'black',\n            strokeWidth: STROKE_WIDTH,\n          }, isHighlighted ? dropshadow : {}),\n        }),\n        svg.text({\n          attrs: {\n            'text-anchor': 'middle', y: '0.8' },\n          style: mergeStyles({ fontSize: '2.5px' }, fontBase, userSelectNone),\n        }, [`${content}`]),\n      ]),\n    );\n}\n\nfunction OriginalMarble(sources) {\n  const { DOM, time } = timelineItem(ELEMENT_CLASS, view, sources);\n\n  const data$ = Observable.combineLatest(time, sources.id)\n    .map(([time, id]) => ({ time, id }));\n\n  return { DOM, data: data$ };\n}\n\nexport function Marble(sources) {\n  return isolate(OriginalMarble)(sources);\n}\n"],"file":"marble.js"}