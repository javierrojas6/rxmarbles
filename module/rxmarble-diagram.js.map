{"version":3,"sources":["../src/rxmarble-diagram.js"],"names":["div","makeDOMDriver","run","Observable","of","apply","flip","identity","length","map","merge","prop","zip","Collection","bgWhite","mergeStyles","elevation1","Timeline","createOutputStream$","inputsToTimelines","renderOperatorBox","sandboxStyle","borderRadius","main","operator","isInteractive","sources","render","dummyDriver","initialValue","value","remember","startWith","DOM","store","operatorObs","timelineInputs","switchMap","example","pluck","filter","skip","inputs","publishReplay","refCount","inputTimelines","gather","inputDOMs","inputDataList","debounceTime","withLatestFrom","outputTimeline","outputTimelineSources","marbles","end","interactive","outputTimeline2","renderedDOM","combineLatest","inputsDOMs","outputDOM","style","label","data","drawDiagram","DomElement"],"mappings":"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","sourcesContent":["import { div, makeDOMDriver } from \"@cycle/dom\";\nimport { run } from \"@cycle/rxjs-run\";\nimport { Observable } from \"rxjs\";\nimport { of } from \"rxjs/observable/of\";\nimport { apply, flip, identity, length, map, merge, prop, zip } from \"ramda\";\n\nimport { Collection } from \"./collection\";\nimport { bgWhite } from \"./styles\";\nimport { merge as mergeStyles, elevation1 } from \"./styles/utils\";\n\nimport { Timeline } from \"./components/timeline\";\n\nimport { createOutputStream$ } from \"./components/sandbox/sandbox-output\";\nimport { inputsToTimelines } from \"./components/sandbox/sandbox-input\";\nimport { renderOperatorBox } from \"./components/sandbox/operator-label\";\n\nconst sandboxStyle = mergeStyles(bgWhite, elevation1, { borderRadius: \"2px\" });\n\nconst main = (operator, isInteractive) => (sources) =>\n  render(sources, operator, isInteractive);\n\nconst dummyDriver = (initialValue) => (value) =>\n  value.remember().startWith(initialValue);\n\n/**\n * simpler render function\n */\nconst render = ({ DOM, store }, operator, isInteractive = true) => {\n  // operator process\n  const operatorObs = of(operator);\n  const timelineInputs = operatorObs\n    .switchMap((example) =>\n      store\n        .pluck(\"inputs\")\n        .filter(identity)\n        // bug: For some reason inputDataList$ emits old value after\n        // route change. Skip it.\n        .skip(1)\n        .startWith(inputsToTimelines(example.inputs))\n    )\n    .publishReplay(1)\n    .refCount();\n\n  const inputTimelines = Collection.gather(\n    Timeline,\n    { DOM },\n    timelineInputs,\n    \"id\"\n  )\n    .publishReplay(1)\n    .refCount();\n\n  const inputDOMs = Collection.pluck(inputTimelines, prop(\"DOM\"));\n  const inputDataList = Collection.pluck(inputTimelines, prop(\"data\"))\n    .filter(length)\n    .debounceTime(0)\n    .withLatestFrom(timelineInputs, zip)\n    .map(map(apply(flip(merge))));\n\n  const outputTimeline = createOutputStream$(operatorObs, inputDataList);\n\n  // rendering process\n  const outputTimelineSources = {\n    DOM,\n    marbles: outputTimeline.pluck(\"marbles\"),\n    end: outputTimeline.pluck(\"end\"),\n    interactive: Observable.of(isInteractive),\n  };\n\n  const outputTimeline2 = Timeline(outputTimelineSources);\n  const renderedDOM = Observable.combineLatest(\n    inputDOMs,\n    outputTimeline2.DOM\n  ).map(([inputsDOMs, outputDOM]) =>\n    div({ style: sandboxStyle }, [\n      ...inputsDOMs,\n      renderOperatorBox(operator.label),\n      outputDOM,\n    ])\n  );\n\n  return {\n    DOM: renderedDOM,\n    data: inputDataList.map((inputs) => ({ inputs })),\n  };\n};\n\nexport const drawDiagram = (DomElement, operator, isInteractive = true) => {\n  run(main(operator, isInteractive), {\n    DOM: makeDOMDriver(DomElement),\n    store: dummyDriver({}),\n  });\n  return DomElement;\n};\n"],"file":"rxmarble-diagram.js"}