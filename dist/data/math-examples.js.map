{"version":3,"sources":["../../src/data/math-examples.js"],"names":["mathExamples","count","label","inputs","t","c","apply","content","max","x","y","min","reduce","id"],"mappings":"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","sourcesContent":["import { merge } from 'ramda';\n\nexport const mathExamples = {\n  count: {\n    label: 'count(x => x > 10)',\n    inputs: [\n      [{t:5, c:2}, {t:15, c:30}, {t:25, c:22}, {t:35, c:5}, {t:45, c:60}, {t:55, c:1}, 80]\n    ],\n    apply: function(inputs) {\n      return inputs[0].count(({ content }) => (content > 10));\n    }\n  },\n\n  max: {\n    label: 'max',\n    inputs: [\n      [{t:5, c:2}, {t:15, c:30}, {t:25, c:22}, {t:35, c:5}, {t:45, c:60}, {t:55, c:1}, 80]\n    ],\n    apply: function(inputs) {\n      return inputs[0].max((x, y) => {\n        if (x.content > y.content) { return 1; }\n        if (x.content < y.content) { return -1; }\n        return 0;\n      });\n    }\n  },\n\n  min: {\n    label: 'min',\n    inputs: [\n      [{t:5, c:2}, {t:15, c:30}, {t:25, c:22}, {t:35, c:5}, {t:45, c:60}, {t:55, c:1}, 80]\n    ],\n    apply: function(inputs) {\n      return inputs[0].min((x, y) => {\n        if (x.content > y.content) { return 1; }\n        if (x.content < y.content) { return -1; }\n        return 0;\n      });\n    }\n  },\n\n  reduce: {\n    label: 'reduce((x, y) => x + y)',\n    inputs: [\n      [{t:5, c:1}, {t:15, c:2}, {t:25, c:3}, {t:35, c:4}, {t:65, c:5}, 80]\n    ],\n    apply: function(inputs) {\n      return inputs[0].reduce((x, y) =>\n        merge(x, { content: x.content + y.content, id: x.id + y.id })\n      );\n    }\n  },\n};\n"],"file":"math-examples.js"}