{"version":3,"sources":["../../../src/components/timeline/marble.js"],"names":["Marble","ELEMENT_CLASS","POSSIBLE_COLORS","COLORS","blue","green","yellow","red","view","sources","value$","isHighlighted$","Observable","combineLatest","id","content","map","value","isHighlighted","svg","g","attrs","class","transform","style","cursor","circle","r","MARBLE_SIZE","fill","length","stroke","strokeWidth","STROKE_WIDTH","dropshadow","text","y","fontSize","fontBase","userSelectNone","OriginalMarble","DOM","time","data$","data"],"mappings":";;;;;QAuDgBA,M,GAAAA,M;;AAvDhB;;AACA;;;;AACA;;AACA;;AAEA;;AACA;;AAOA;;AACA;;;;AAGA,MAAMC,aAAa,GAAG,QAAtB;AAEA,MAAMC,eAAe,GAAG,CAACC,eAAOC,IAAR,EAAcD,eAAOE,KAArB,EAA4BF,eAAOG,MAAnC,EAA2CH,eAAOI,GAAlD,CAAxB;;AAEA,SAASC,IAAT,CAAcC,OAAd,EAAuBC,MAAvB,EAA+BC,cAA/B,EAA+C;AAC7C,SAAOC,iBAAWC,aAAX,CACLJ,OAAO,CAACK,EADH,EACOL,OAAO,CAACM,OADf,EACwBL,MADxB,EACgCC,cADhC,EAEJK,GAFI,CAEA,CAAC,CAACF,EAAD,EAAKC,OAAL,EAAcE,KAAd,EAAqBC,aAArB,CAAD,KACHC,SAAIC,CAAJ,CAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAErB,aAAT;AAAwBsB,MAAAA,SAAS,EAAG,aAAYN,KAAM;AAAtD,KADH;AAEJO,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEP,aAAa,GAAG,WAAH,GAAiB;AAAxC;AAFH,GAAN,EAGG,CACDC,SAAIO,MAAJ,CAAW;AACTL,IAAAA,KAAK,EAAE;AAAEM,MAAAA,CAAC,EAAEC;AAAL,KADE;AAETJ,IAAAA,KAAK,EAAE,kBAAM;AACXK,MAAAA,IAAI,EAAE3B,eAAe,CAACY,EAAE,GAAGZ,eAAe,CAAC4B,MAAtB,CADV;AAEXC,MAAAA,MAAM,EAAE,OAFG;AAGXC,MAAAA,WAAW,EAAEC;AAHF,KAAN,EAIJf,aAAa,GAAGgB,iBAAH,GAAgB,EAJzB;AAFE,GAAX,CADC,EASDf,SAAIgB,IAAJ,CAAS;AACPd,IAAAA,KAAK,EAAE;AACL,qBAAe,QADV;AACoBe,MAAAA,CAAC,EAAE;AADvB,KADA;AAGPZ,IAAAA,KAAK,EAAE,mBAAY;AAAEa,MAAAA,QAAQ,EAAE;AAAZ,KAAZ,EAAmCC,gBAAnC,EAA6CC,sBAA7C;AAHA,GAAT,EAIG,CAAE,GAAExB,OAAQ,EAAZ,CAJH,CATC,CAHH,CAHG,CAAP;AAsBD;;AAED,SAASyB,cAAT,CAAwB/B,OAAxB,EAAiC;AAC/B,QAAM;AAAEgC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAgB,gCAAazC,aAAb,EAA4BO,IAA5B,EAAkCC,OAAlC,CAAtB;;AAEA,QAAMkC,KAAK,GAAG/B,iBAAWC,aAAX,CAAyB6B,IAAzB,EAA+BjC,OAAO,CAACK,EAAvC,EACXE,GADW,CACP,CAAC,CAAC0B,IAAD,EAAO5B,EAAP,CAAD,MAAiB;AAAE4B,IAAAA,IAAF;AAAQ5B,IAAAA;AAAR,GAAjB,CADO,CAAd;;AAGA,SAAO;AAAE2B,IAAAA,GAAF;AAAOG,IAAAA,IAAI,EAAED;AAAb,GAAP;AACD;;AAEM,SAAS3C,MAAT,CAAgBS,OAAhB,EAAyB;AAC9B,SAAO,uBAAQ+B,cAAR,EAAwB/B,OAAxB,CAAP;AACD","sourcesContent":["import { svg } from '@cycle/dom';\nimport isolate from '@cycle/isolate';\nimport { Observable } from 'rxjs';\nimport { merge, values, range } from 'ramda';\n\nimport { dropshadow } from '../../styles/utils';\nimport {\n  COLORS,\n  fontBase,\n  userSelectNone,\n  merge as mergeStyles\n} from '../../styles';\n\nimport { MARBLE_SIZE, STROKE_WIDTH } from './timeline-constants';\nimport { timelineItem } from './timeline-item';\n\n\nconst ELEMENT_CLASS = 'marble';\n\nconst POSSIBLE_COLORS = [COLORS.blue, COLORS.green, COLORS.yellow, COLORS.red];\n\nfunction view(sources, value$, isHighlighted$) {\n  return Observable.combineLatest(\n    sources.id, sources.content, value$, isHighlighted$)\n    .map(([id, content, value, isHighlighted]) =>\n      svg.g({\n        attrs: { class: ELEMENT_CLASS, transform: `translate(${value}, 5)` },\n        style: { cursor: isHighlighted ? 'ew-resize' : 'default'  },\n      }, [\n        svg.circle({\n          attrs: { r: MARBLE_SIZE },\n          style: merge({\n            fill: POSSIBLE_COLORS[id % POSSIBLE_COLORS.length],\n            stroke: 'black',\n            strokeWidth: STROKE_WIDTH,\n          }, isHighlighted ? dropshadow : {}),\n        }),\n        svg.text({\n          attrs: {\n            'text-anchor': 'middle', y: '0.8' },\n          style: mergeStyles({ fontSize: '2.5px' }, fontBase, userSelectNone),\n        }, [`${content}`]),\n      ]),\n    );\n}\n\nfunction OriginalMarble(sources) {\n  const { DOM, time } = timelineItem(ELEMENT_CLASS, view, sources);\n\n  const data$ = Observable.combineLatest(time, sources.id)\n    .map(([time, id]) => ({ time, id }));\n\n  return { DOM, data: data$ };\n}\n\nexport function Marble(sources) {\n  return isolate(OriginalMarble)(sources);\n}\n"],"file":"marble.js"}