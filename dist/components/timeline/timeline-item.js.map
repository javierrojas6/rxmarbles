{"version":3,"sources":["../../../src/components/timeline/timeline-item.js"],"names":["timelineItem","mouseMove$","Observable","fromEvent","document","mouseUp$","getPercentageFn","element","width","left","getBoundingClientRect","ratio","elementLeft","window","scrollX","x","getPausable$","pause$","obsv$","switchMap","pause","never","intent","elementClass","DOMSource","isDraggable$","select","startHighlight$","events","mapTo","stopHighlight$","isHighlighted$","merge","startWith","publishReplay","refCount","timeChange$","map","getPercentage","takeUntil","pluck","distinctUntilChanged","model","props$","timeSource$","restrictedTimeChange$","minChange$","withLatestFrom","max","maxChange$","min","view","sources","DOM","props","time","isDraggable","time$","vtree$"],"mappings":";;;;;QA6DgBA,Y,GAAAA,Y;;AA7DhB;;AACA;;AAEA,MAAMC,UAAU,GAAGC,iBAAWC,SAAX,CAAqBC,QAArB,EAA+B,WAA/B,CAAnB;;AACA,MAAMC,QAAQ,GAAGH,iBAAWC,SAAX,CAAqBC,QAArB,EAA+B,SAA/B,CAAjB;;AAEA,SAASE,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBF,OAAO,CAACG,qBAAR,EAAxB;AACA,QAAMC,KAAK,GAAI,MAAMH,KAAP,IAAiB,IAA/B;AACA,QAAMI,WAAW,GAAGH,IAAI,GAAGI,MAAM,CAACC,OAAlC;AACA,SAAQC,CAAD,IAAO,CAACA,CAAC,GAAGH,WAAL,IAAoBD,KAAlC;AACD;;AAED,SAASK,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqC;AACnC,SAAOD,MAAM,CACVE,SADI,CACMC,KAAK,IAAIA,KAAK,GAAGF,KAAH,GAAWhB,iBAAWmB,KAAX,EAD/B,CAAP;AAED;;AAED,SAASC,MAAT,CAAgBC,YAAhB,EAA8BC,SAA9B,EAAyCC,YAAzC,EAAuD;AACrD,QAAMlB,OAAO,GAAGiB,SAAS,CAACE,MAAV,CAAiB,MAAMH,YAAvB,CAAhB;AAEA,QAAMI,eAAe,GAAGpB,OAAO,CAACqB,MAAR,CAAe,YAAf,EAA6BC,KAA7B,CAAmC,IAAnC,CAAxB;AACA,QAAMC,cAAc,GAAGvB,OAAO,CAACqB,MAAR,CAAe,YAAf,EAA6BC,KAA7B,CAAmC,KAAnC,CAAvB;AACA,QAAME,cAAc,GAAGf,YAAY,CACjCS,YADiC,EACnBvB,iBAAW8B,KAAX,CAAiBL,eAAjB,EAAkCG,cAAlC,CADmB,CAAZ,CAEpBG,SAFoB,CAEV,KAFU,EAGpBC,aAHoB,CAGN,CAHM,EAGHC,QAHG,EAAvB;AAKA,QAAMC,WAAW,GAAG7B,OAAO,CAACqB,MAAR,CAAe,WAAf,EACjBS,GADiB,CACb,iBAAK,CAAC,eAAD,EAAkB,eAAlB,CAAL,CADa,EAEjBA,GAFiB,CAEb/B,eAFa,EAGjBa,SAHiB,CAGPmB,aAAa,IACtBrC,UAAU,CAACsC,SAAX,CAAqBlC,QAArB,EACGmC,KADH,CACS,OADT,EAEGH,GAFH,CAEOC,aAFP,EAGGG,oBAHH,EAJgB,CAApB;AAUA,SAAO;AAAEL,IAAAA,WAAF;AAAeL,IAAAA;AAAf,GAAP;AACD;;AAED,SAASW,KAAT,CAAeC,MAAf,EAAuBC,WAAvB,EAAoCR,WAApC,EAAiDX,YAAjD,EAA+D;AAC7D,QAAMoB,qBAAqB,GAAG7B,YAAY,CAACS,YAAD,EAAeW,WAAf,CAAZ,CAC3BC,GAD2B,CACvB,gBAAI,CAAJ,CADuB,EAE3BA,GAF2B,CAEvB,gBAAI,GAAJ,CAFuB,CAA9B;AAIA,QAAMS,UAAU,GAAGH,MAAM,CAACH,KAAP,CAAa,SAAb,EAChBC,oBADgB,GAEhBM,cAFgB,CAEDH,WAFC,EAEYI,UAFZ,CAAnB;AAIA,QAAMC,UAAU,GAAGN,MAAM,CAACH,KAAP,CAAa,SAAb,EAChBC,oBADgB,GAEhBM,cAFgB,CAEDH,WAFC,EAEYM,UAFZ,CAAnB;AAIA,SAAOhD,iBAAW8B,KAAX,EACL;AACAY,EAAAA,WAFK,EAEQC,qBAFR,EAE+BC,UAF/B,EAE2CG,UAF3C,EAGJR,oBAHI,GAIJP,aAJI,CAIU,CAJV,EAIaC,QAJb,EAAP;AAKD;;AAEM,SAASnC,YAAT,CAAsBuB,YAAtB,EAAoC4B,IAApC,EAA0CC,OAA1C,EAAmD;AACxD,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAP;AAAcC,IAAAA,IAAI,EAAEX,WAApB;AAAiCY,IAAAA;AAAjC,MAAiDJ,OAAvD;AACA,QAAM;AAAEhB,IAAAA,WAAF;AAAeL,IAAAA;AAAf,MACFT,MAAM,CAACC,YAAD,EAAe8B,GAAf,EAAoBG,WAApB,CADV;AAEA,QAAMC,KAAK,GAAGf,KAAK,CAACY,KAAD,EAAQV,WAAR,EAAqBR,WAArB,EAAkCoB,WAAlC,CAAnB;AACA,QAAME,MAAM,GAAGP,IAAI,CAACC,OAAD,EAAUK,KAAV,EAAiB1B,cAAjB,CAAnB;AACA,SAAO;AAAEsB,IAAAA,GAAG,EAAEK,MAAP;AAAeH,IAAAA,IAAI,EAAEE;AAArB,GAAP;AACD","sourcesContent":["import { Observable } from 'rxjs';\nimport { add, compose, path, multiply, max, min } from 'ramda';\n\nconst mouseMove$ = Observable.fromEvent(document, 'mousemove');\nconst mouseUp$ = Observable.fromEvent(document, 'mouseup');\n\nfunction getPercentageFn(element) {\n  const { width, left } = element.getBoundingClientRect();\n  const ratio = (100 / width) || 0.15;\n  const elementLeft = left + window.scrollX;\n  return (x) => (x - elementLeft) * ratio;\n}\n\nfunction getPausable$(pause$, obsv$) {\n  return pause$\n    .switchMap(pause => pause ? obsv$ : Observable.never());\n}\n\nfunction intent(elementClass, DOMSource, isDraggable$) {\n  const element = DOMSource.select('.' + elementClass);\n\n  const startHighlight$ = element.events('mouseenter').mapTo(true);\n  const stopHighlight$ = element.events('mouseleave').mapTo(false);\n  const isHighlighted$ = getPausable$(\n    isDraggable$, Observable.merge(startHighlight$, stopHighlight$))\n    .startWith(false)\n    .publishReplay(1).refCount();\n\n  const timeChange$ = element.events('mousedown')\n    .map(path(['currentTarget', 'parentElement']))\n    .map(getPercentageFn)\n    .switchMap(getPercentage =>\n      mouseMove$.takeUntil(mouseUp$)\n        .pluck('pageX')\n        .map(getPercentage)\n        .distinctUntilChanged()\n    );\n\n  return { timeChange$, isHighlighted$ };\n}\n\nfunction model(props$, timeSource$, timeChange$, isDraggable$) {\n  const restrictedTimeChange$ = getPausable$(isDraggable$, timeChange$)\n    .map(max(0))\n    .map(min(100));\n\n  const minChange$ = props$.pluck('minTime')\n    .distinctUntilChanged()\n    .withLatestFrom(timeSource$, max);\n\n  const maxChange$ = props$.pluck('maxTime')\n    .distinctUntilChanged()\n    .withLatestFrom(timeSource$, min);\n\n  return Observable.merge(\n    // order matters\n    timeSource$, restrictedTimeChange$, minChange$, maxChange$)\n    .distinctUntilChanged()\n    .publishReplay(1).refCount();\n}\n\nexport function timelineItem(elementClass, view, sources) {\n  const { DOM, props, time: timeSource$, isDraggable } = sources;\n  const { timeChange$, isHighlighted$ }\n    = intent(elementClass, DOM, isDraggable);\n  const time$ = model(props, timeSource$, timeChange$, isDraggable);\n  const vtree$ = view(sources, time$, isHighlighted$);\n  return { DOM: vtree$, time: time$ };\n}\n"],"file":"timeline-item.js"}