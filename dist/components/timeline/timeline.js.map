{"version":3,"sources":["../../../src/components/timeline/timeline.js"],"names":["Timeline","timelineStyle","padding","DIMENS","spaceSmall","spaceMedium","sortMarbleDoms$","marbles$","doms$","Collection","pluck","dataList$","Observable","combineLatest","zip","map","OriginalTimeline","sources","DOM","marbles","marblesState$","end","end$","interactive","interactive$","marblesProps$","minTime","maxTime","time","endMarkerProps$","maxMarbleTime","reduce","max","isTall","MARBLE_SIZE","marblesSources","props","isDraggable","endMarkerSources","gather","Marble","marbleDOMs$","endMarker","vtree$","marbleDOMs","endMarkerDOM","style","attrs","viewBox","width","height","overflow","svg","line","x1","y1","x2","y2","stroke","strokeWidth","STROKE_WIDTH","polygon","points","marbleData$","debounceTime","withLatestFrom","merge","data$","endMarkerTime","data"],"mappings":"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","sourcesContent":["import { svg, div } from '@cycle/dom';\nimport isolate from '@cycle/isolate';\nimport { Observable } from 'rxjs';\nimport { apply, flip, map, max, merge, path, prop, sortBy, zip } from 'ramda';\n\nimport { Collection } from '../../collection';\nimport { DIMENS } from '../../styles';\n\nimport { MARBLE_SIZE, STROKE_WIDTH } from './timeline-constants';\nimport { Marble } from './marble';\nimport { EndMarker } from './end-marker';\n\nconst timelineStyle = { padding: `${DIMENS.spaceSmall} ${DIMENS.spaceMedium}` };\n\nfunction sortMarbleDoms$(marbles$) {\n  const doms$ = Collection.pluck(marbles$, prop('DOM'));\n  const dataList$ = Collection.pluck(marbles$, prop('data'));\n\n  return Observable.combineLatest(doms$, dataList$, zip)\n    .map(sortBy(path([1, 'time'])))\n    .map(map(prop(0)));\n}\n\nfunction OriginalTimeline(sources) {\n  const {\n    DOM,\n    marbles: marblesState$,\n    end: end$,\n    interactive: interactive$\n  } = sources;\n  const marblesProps$ = end$\n    .map((end) => ({\n      minTime: 0,\n      maxTime: end.time,\n    }));\n  const endMarkerProps$ = Observable.combineLatest(marblesState$, end$)\n    .map(([marbles, end]) => {\n      const maxMarbleTime = marbles.map(prop('time')).reduce(max, 0);\n      return {\n        isTall: end.time <= (maxMarbleTime + MARBLE_SIZE),\n        minTime: maxMarbleTime,\n        maxTime: 100,\n      };\n    });\n\n  const marblesSources = {\n    DOM,\n    props: marblesProps$,\n    isDraggable: interactive$\n  };\n  const endMarkerSources = {\n    DOM,\n    props: endMarkerProps$,\n    time: end$.pluck('time'),\n    isDraggable: interactive$,\n  };\n\n  const marbles$ = Collection.gather(\n    Marble, marblesSources, marblesState$, 'itemId');\n  const marbleDOMs$ = sortMarbleDoms$(marbles$);\n  const endMarker = EndMarker(endMarkerSources);\n\n  const vtree$ = Observable.combineLatest(marbleDOMs$, endMarker.DOM)\n    .map(([marbleDOMs, endMarkerDOM]) =>\n      div({ style: timelineStyle }, [\n        svg({\n          attrs: { viewBox: '0 0 7 10' },\n          style: { width: '48px', height: '68px', overflow: 'visible' },\n        }, [\n          svg.line({\n            attrs: { x1: '0', y1: '5', x2: '112', y2: '5' },\n            style: { stroke: 'black', strokeWidth: `${STROKE_WIDTH}` },\n          }),\n          svg.polygon({\n            attrs: { points: '111.7,6.1 111.7,3.9 114,5' },\n          }),\n        ]),\n        svg({\n          attrs: { viewBox: '0 0 100 10' },\n          style: { width: '680px', height: '68px', overflow: 'visible' },\n        }, [\n          endMarkerDOM,\n          ...marbleDOMs,\n        ]),\n      ])\n    );\n\n  const marbleData$ = Collection.pluck(marbles$, prop('data'))\n    .debounceTime(0)\n    .withLatestFrom(marblesState$, zip)\n    .map(map(apply(flip(merge))));\n\n  const data$ = Observable.combineLatest(marbleData$, endMarker.time)\n    .map(([marbles, endMarkerTime]) => ({\n      marbles,\n      end: { time: endMarkerTime },\n    }));\n\n  return { DOM: vtree$, data: data$ };\n}\n\nexport function Timeline(sources) {\n  return isolate(OriginalTimeline)(sources);\n}\n"],"file":"timeline.js"}