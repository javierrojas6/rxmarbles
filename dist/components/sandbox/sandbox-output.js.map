{"version":3,"sources":["../../../src/components/sandbox/sandbox-output.js"],"names":["createOutputStream$","MAX_TIME","toVTStream","_toVTStream","scheduler","data","marbleStreams$","Observable","observer","marbles","forEach","item","schedule","next","time","takeUntil","timer","end","outputStreamToMarbles$","stream","subject$","ReplaySubject","stop$","Subject","endTime","observeOn","timestamp","map","value","marble","content","id","reduce","a","b","concat","items","i","itemId","subscribe","undefined","now","flush","asObservable","example$","inputStores$","debounceTime","withLatestFrom","inputStores","example","vtScheduler","VirtualTimeScheduler","inputStreams","outputStream","apply","mergeAll","publishReplay","refCount"],"mappings":"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","sourcesContent":["import { Observable, ReplaySubject, Subject, VirtualTimeScheduler } from 'rxjs';\nimport { assoc, curry, merge } from 'ramda';\n\nimport { calculateNotificationContentHash } from './sandbox-utils';\n\nconst MAX_TIME = 100;\n\nconst toVTStream = curry(function _toVTStream(scheduler, data) {\n  const marbleStreams$ = new Observable(observer => {\n    data.marbles.forEach(item =>\n      scheduler.schedule(() => observer.next(item), item.time));\n  });\n  return marbleStreams$\n    .takeUntil(Observable.timer(data.end.time + 1, scheduler));\n});\n\nfunction outputStreamToMarbles$(scheduler, stream) {\n  const subject$ = new ReplaySubject(1);\n  const stop$ = new Subject();\n  let endTime;\n\n  stream\n    .observeOn(scheduler)\n    .timestamp(scheduler)\n    .map(({ value, timestamp }) => {\n      const marble = typeof value !== 'object'\n        ? { content: value, id: calculateNotificationContentHash(value) }\n        : value;\n\n      return assoc('time', timestamp / MAX_TIME * 100, marble);\n    })\n    .takeUntil(stop$)\n    .reduce((a, b) => a.concat(b), [])\n    .map(items => items.map(\n      (item, i) => merge(item, { itemId: i }))\n    )\n    .subscribe(\n      items => subject$.next(items),\n      undefined,\n      () => endTime = scheduler.now(),\n    );\n\n  scheduler.flush();\n  stop$.next();\n\n  return subject$.asObservable()\n    .map(marbles => ({ marbles, end: { time: endTime } }));\n}\n\nexport function createOutputStream$(example$, inputStores$) {\n  return inputStores$.debounceTime(0).withLatestFrom(example$)\n    .map(([inputStores, example]) => {\n      const vtScheduler = new VirtualTimeScheduler(undefined, MAX_TIME);\n\n      const inputStreams = inputStores.map(toVTStream(vtScheduler));\n      const outputStream = example.apply(inputStreams, vtScheduler)\n        // add 0.01 or else things at exactly MAX_TIME will cut off\n        .takeUntil(Observable.timer(MAX_TIME + 0.01, vtScheduler));\n\n      return outputStreamToMarbles$(vtScheduler, outputStream);\n    })\n    .mergeAll()\n    .publishReplay(1).refCount();\n}\n"],"file":"sandbox-output.js"}