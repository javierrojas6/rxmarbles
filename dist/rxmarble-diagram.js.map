{"version":3,"sources":["../src/rxmarble-diagram.js"],"names":["sandboxStyle","bgWhite","elevation1","borderRadius","main","operator","isInteractive","sources","render","dummyDriver","initialValue","value","remember","startWith","DOM","store","operatorObs","timelineInputs","switchMap","example","pluck","filter","identity","skip","inputs","publishReplay","refCount","inputTimelines","Collection","gather","Timeline","inputDOMs","inputDataList","length","debounceTime","withLatestFrom","zip","map","merge","outputTimeline","outputTimelineSources","marbles","end","interactive","Observable","of","outputTimeline2","renderedDOM","combineLatest","inputsDOMs","outputDOM","style","label","data","drawDiagram","DomElement"],"mappings":"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","sourcesContent":["import { div, makeDOMDriver } from \"@cycle/dom\";\nimport { run } from \"@cycle/rxjs-run\";\nimport { Observable } from \"rxjs\";\nimport { of } from \"rxjs/observable/of\";\nimport { apply, flip, identity, length, map, merge, prop, zip } from \"ramda\";\n\nimport { Collection } from \"./collection\";\nimport { bgWhite } from \"./styles\";\nimport { merge as mergeStyles, elevation1 } from \"./styles/utils\";\n\nimport { Timeline } from \"./components/timeline\";\n\nimport { createOutputStream$ } from \"./components/sandbox/sandbox-output\";\nimport { inputsToTimelines } from \"./components/sandbox/sandbox-input\";\nimport { renderOperatorBox } from \"./components/sandbox/operator-label\";\n\nconst sandboxStyle = mergeStyles(bgWhite, elevation1, { borderRadius: \"2px\" });\n\nconst main = (operator, isInteractive) => (sources) =>\n  render(sources, operator, isInteractive);\n\nconst dummyDriver = (initialValue) => (value) =>\n  value.remember().startWith(initialValue);\n\n/**\n * simpler render function\n */\nconst render = ({ DOM, store }, operator, isInteractive = true) => {\n  // operator process\n  const operatorObs = of(operator);\n  const timelineInputs = operatorObs\n    .switchMap((example) =>\n      store\n        .pluck(\"inputs\")\n        .filter(identity)\n        // bug: For some reason inputDataList$ emits old value after\n        // route change. Skip it.\n        .skip(1)\n        .startWith(inputsToTimelines(example.inputs))\n    )\n    .publishReplay(1)\n    .refCount();\n\n  const inputTimelines = Collection.gather(\n    Timeline,\n    { DOM },\n    timelineInputs,\n    \"id\"\n  )\n    .publishReplay(1)\n    .refCount();\n\n  const inputDOMs = Collection.pluck(inputTimelines, prop(\"DOM\"));\n  const inputDataList = Collection.pluck(inputTimelines, prop(\"data\"))\n    .filter(length)\n    .debounceTime(0)\n    .withLatestFrom(timelineInputs, zip)\n    .map(map(apply(flip(merge))));\n\n  const outputTimeline = createOutputStream$(operatorObs, inputDataList);\n\n  // rendering process\n  const outputTimelineSources = {\n    DOM,\n    marbles: outputTimeline.pluck(\"marbles\"),\n    end: outputTimeline.pluck(\"end\"),\n    interactive: Observable.of(isInteractive),\n  };\n\n  const outputTimeline2 = Timeline(outputTimelineSources);\n  const renderedDOM = Observable.combineLatest(\n    inputDOMs,\n    outputTimeline2.DOM\n  ).map(([inputsDOMs, outputDOM]) =>\n    div({ style: sandboxStyle }, [\n      ...inputsDOMs,\n      renderOperatorBox(operator.label),\n      outputDOM,\n    ])\n  );\n\n  return {\n    DOM: renderedDOM,\n    data: inputDataList.map((inputs) => ({ inputs })),\n  };\n};\n\nexport const drawDiagram = (DomElement, operator, isInteractive = true) => {\n  run(main(operator, isInteractive), {\n    DOM: makeDOMDriver(DomElement),\n    store: dummyDriver({}),\n  });\n  return DomElement;\n};\n"],"file":"rxmarble-diagram.js"}